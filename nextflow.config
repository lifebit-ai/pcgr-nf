// 1. Parameters
params {

    // Essential parameters
    // - Single VCF file mode
    vcf = false
    // - Multiple VCF file mode
    csv = false
    // - Metadata TSV file
    metadata = false

    // VCF filter
    // - Filtering is optional, by default it is omitted
    filtering = false
    
    // VCF filter parameters
    min_qd = '2'
    max_fs = '60'
    max_sor = '3'
    min_mq = '40'
    min_mqranksum = '-2.5'
    min_readposranksum = '-8'

    // PCGR run parameters
    pcgr_config = 's3://fast-ngs/cloudos-public-data-ines/pcgr.toml'
    pcgr_genome = 'grch38'
    pcgr_tumor_site = 0
    pcgr_data = false
    genomes {
      'grch38' {
        pcgr_data = 's3://lifebit-featured-datasets/pipelines/pcgr/reference/pcgr_data/v20201123/pcgr_data_grch38'
      }
      'grch37' {
        pcgr_data = 's3://lifebit-featured-datasets/pipelines/pcgr/reference/pcgr_data/v20201123/pcgr_data_grch37'
      }
    }

    // PCGR configuration parameters
    maf_onekg_eur = 0.002
    maf_onekg_amr = 0.002
    maf_onekg_afr = 0.002
    maf_onekg_sas = 0.002
    maf_onekg_eas = 0.002
    maf_onekg_global = 0.002

    maf_gnomad_nfe = 0.002
    maf_gnomad_amr = 0.002
    maf_gnomad_afr = 0.002
    maf_gnomad_asj = 0.002
    maf_gnomad_sas = 0.002
    maf_gnomad_eas = 0.002
    maf_gnomad_fin = 0.002
    maf_gnomad_oth = 0.002
    maf_gnomad_global = 0.002

    exclude_pon = true
    exclude_likely_hom_germline = false
    exclude_likely_het_germline = false
    exclude_dbsnp_nonsomatic = false
    exclude_nonexonic = true

    tumor_dp_tag = ""
    tumor_af_tag = ""
    control_dp_tag = ""
    control_af_tag = ""
    call_conf_tag = ""

    report_theme = "default"
    custom_tags = ""

    list_noncoding = true
    n_vcfanno_proc = 4
    n_vep_forks = 4
    vep_pick_order = "canonical,appris,biotype,ccds,rank,tsl,length,mane"
    vep_skip_intergenic = false
    vcf2maf = true

    outdir = 'results'

    // report mode:
    // - Either "report" or "summary
    report_mode = "summary"

    // summary options:
    // - Columns for summary tables, separated by a comma
    columns_genes_simple = false
    columns_genes_complete = false
    columns_variants = "VARIANT_CLASS,CONSEQUENCE,TIER,TIER_DESCRIPTION"
    
    // report_dir is:
    // - the folder from the container that includes the scripts for NF <= v20.01 (bin)
    // - the ${projectDir}/bin folder of the root of the repo with the scripts for NF >= v20.10
    report_dir = '/opt/bin/'

    // when set to true, prints help and exits
    help = false

    // save nextflow command log files to results directory
    savescript = 'task_hash=`echo \${PWD} | awk -F"/" \'{ print "/"$(NF-1)"/"$NF }\' | sed "s#/#-#g" | cut -c2-10`; mkdir command-logs-\$task_hash ; cp .command.*{err,log,sh} command-logs-\$task_hash'
    // save workdirectory trr to results directory
    treescript = 'task_hash=`echo \${PWD} | awk -F"/" \'{ print "/"$(NF-1)"/"$NF }\' | sed "s#/#-#g" | cut -c2-10`; tree > work-tree-\$task_hash.txt'

    // container for all processes, excluding those defined with 'withName' (see example below)
    container = 'quay.io/lifebitai/pcgr:0.9.1'

    // process resources defaults
    cpus = 1
    memory = 2.GB
    disk = '30.GB'
    
    // max resources limits defaults
    max_cpus = 16
    max_memory = 20.GB
    max_time = 240.h
    
    // execution related defaults
    config = 'conf/standard.config'
    echo = false
    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxErrors = '-1'
    maxRetries = 10
    maxForks = 200
    queueSize = 200
    executor = false

    // google-lifesciences
    gls_bootDiskSize = '50.GB'
    gls_preemptible = true
    zone = 'us-east1-b'
    network = 'default'
    subnetwork = 'default'
}


// 2. Profiles


// Do not update the order because the values set in params scope will not be overwritten
// Do not attempt to simplify to 
// includeConfig params.config 
// outside of profiles scope, it will fail to update the values of the params
profiles {
    standard {includeConfig params.config}
    docker { docker.enabled = true }
    base {includeConfig 'conf/base.config'}
    google {includeConfig 'conf/google.config'}
    test {includeConfig 'conf/test.config'}
    local {includeConfig 'conf/test.config'}
    singularity {includeConfig 'conf/singularity.config'}
}

// 3. Process

// Do not change order of block, must follow after profiles scope (last section that updates params)
process {
    echo = params.echo
    cpus = params.cpus
    memory = params.memory
    maxRetries = params.maxRetries
    maxForks = params.maxForks
    container = params.container
    errorStrategy = params.errorStrategy
  
    withName: pcgr {
        disk = '100.GB'
        container = 'quay.io/lifebitai/pcgr:0.9.1'
    }

    withName: vcffilter {
      container = 'quay.io/biocontainers/vcflib:1.0.2--h3198e80_5'
    }

    withName: pivot_table_gene_simple {
      container = 'quay.io/lifebitai/pcgr:python-base_1.0.0'
    }

    withName: pivot_table_gene_complete {
      container = 'quay.io/lifebitai/pcgr:python-base_1.0.0'
    }

    withName: pivot_table_variant {
      container = 'quay.io/lifebitai/pcgr:python-base_1.0.0'
    }

    withName: plot_tiers {
      container = 'quay.io/lifebitai/pcgr:python-base_1.0.0'
    }

    withName: summary {
      container = 'quay.io/lifebitai/pcgr:rmarkdown_1.0.0'
    }

    withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
    }
    withLabel:process_medium {
        cpus = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 42.GB * task.attempt, 'memory' ) }
        time = { check_max( 8.h * task.attempt, 'time' ) }
    }
    withLabel:process_high {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 84.GB * task.attempt, 'memory' ) }
        time = { check_max( 10.h * task.attempt, 'time' ) }
    }
    withLabel:process_long {
        time = { check_max( 20.h * task.attempt, 'time' ) }
    }
}

// 4. Executor

executor {
    name = params.executor
    queueSize = params.queueSize
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
